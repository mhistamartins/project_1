Improved_randomfile one
Improved_randomfile two
Improved_randomfile three

#python program to read Json file

import json

#import json
#opening JSON file

f = open('min_signals.json',)

#returns JSON object as
#a dictionary

data = json.load(f)

#iterating through the json
#list

for i in data ['emp_details']:
    print(i)

#closing file


def create_headerfile():

    header_file_path = "project_1/can_messages/output/include/can_messages/CAN_min_signals.h"
    header_file = open(header_file, "w")

    ifndef_def = "#ifndef SIGNALS_H"
    define = "#define SIGNALS_H"
    endif = "#endif /SIGNALS_H */\n"
    include = "#include<sstream>"   
    header_file.write("{}\n{}\n\n".format(ifndef_def, define))
    header_file.write("{}\n\n" .format(include))    
    class_can = 'class CAN_min_signals\n{'
    public = '\npublic:\n'
    private = '\nprivate:\n'
    constructor = '\tCAN_min_signals();\n'    
    header_file.write(class_can + public)
    header_file.write(constructor)
    for signal_element in jason_dict["signals"]:
        print(signal_element["name"])
        formatted_string = f'{signal_element["type"]} and {signal_element["length"]}'
        print(formatted_string)
        print(signal_element["comment"])
        myFile.write(function_to_generate_headerFile(
            "CAN_messages", signal_element["name"], signal_element["type"], "newValue", signal_element["comment"]))    myFile.write("\nprivate:\n\t" + setType + m_startMsgId + ";" +
                 "\n\t" + setType + m_temperatureGetMsgId + ";" +
                 "\n\t" + setType + m_temperatureSetMsgId + ";" +
                 "\n\t" + setType + m_humiditySetMsgId + ";" +
                 "\n\t" + setType + m_humidityGetMsgId + ";\n")    myFile.write("};\n" + endif)
    myFile.close()


    for element in json_dict["signals"]:
        element_name = element["name"]